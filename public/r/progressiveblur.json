{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progressiveblur",
  "type": "registry:block",
  "title": "Progressive Blur",
  "description": "A progressive blur component using tailwindcss",
  "files": [
    {
      "path": "registry/mainstyle/progressiveblur/progressiveblur.tsx",
      "content": "import React from 'react';\r\n\r\ninterface ProgressiveBlurProps {\r\n  className?: string;\r\n  direction?: string;\r\n  overlayColor?: string;\r\n  intensity?: number;\r\n  curve?: 'linear' | 'smooth' | 'exponential';\r\n}\r\n\r\nexport function ProgressiveBlur({ className = '', direction = 'to top', overlayColor = 'transparent', intensity = 2, curve = 'smooth' }: ProgressiveBlurProps) {\r\n  const layers = [\r\n    { blur: 0.25, stops: ['0%', '10%', '30%', '40%'] },\r\n    { blur: 0.5, stops: ['10%', '20%', '40%', '50%'] },\r\n    { blur: 0.75, stops: ['15%', '30%', '50%', '60%'] },\r\n    { blur: 1, stops: ['20%', '40%', '60%', '70%'] },\r\n    { blur: 2, stops: ['40%', '60%', '80%', '90%'] },\r\n    { blur: 2.76, stops: ['60%', '80%'] },\r\n    { blur: 6, stops: ['70%', '100%'] },\r\n  ];\r\n\r\n  // Determine maximum blur from base layers\r\n  const maxBlur = Math.max(...layers.map(l => l.blur));\r\n  // Curve mapping: linear, smoothstep, or exponential ease-in\r\n  const applyCurve = (t: number): number => {\r\n    if (curve === 'smooth') {\r\n      // smoothstep: 3t^2 - 2t^3\r\n      return t * t * (3 - 2 * t);\r\n    }\r\n    if (curve === 'exponential') {\r\n      // exponential ease-in\r\n      return t === 0 ? 0 : Math.pow(2, 10 * (t - 1));\r\n    }\r\n    // default linear\r\n    return t;\r\n  };\r\n\r\n  return (\r\n    <div className={`relative pointer-events-none overflow-hidden ${className}`}>\r\n      {layers.map((layer, idx) => {\r\n        const maskGradient =\r\n          layer.stops.length === 4\r\n            ? `linear-gradient(${direction}, rgba(0,0,0,0) ${layer.stops[0]}, rgba(0,0,0,1) ${layer.stops[1]}, rgba(0,0,0,1) ${layer.stops[2]}, rgba(0,0,0,0) ${layer.stops[3]})`\r\n            : `linear-gradient(${direction}, rgba(0,0,0,0) ${layer.stops[0]}, rgba(0,0,0,1) ${layer.stops[1]})`;\r\n        // apply curve to normalized blur value\r\n        const relative = layer.blur / maxBlur;\r\n        const blurAmount = applyCurve(relative) * maxBlur * intensity;\r\n\r\n        return (\r\n          <div\r\n            key={idx}\r\n            className=\"absolute inset-0\"\r\n            style={{\r\n              backdropFilter: `blur(${blurAmount}px)`,\r\n              WebkitBackdropFilter: `blur(${blurAmount}px)`,\r\n              WebkitMaskImage: maskGradient,\r\n              maskImage: maskGradient\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n      <div\r\n        className=\"absolute inset-0\"\r\n        style={{ background: `linear-gradient(${direction}, transparent, ${overlayColor})` }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}